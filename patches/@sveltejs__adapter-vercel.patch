diff --git a/index.js b/index.js
index d4ec606663b0e2bdbd0b1a3f5a3e4bdf38323020..92ac09ea74092cf631c0216bdfee7dcf40c60c50 100644
--- a/index.js
+++ b/index.js
@@ -51,6 +51,8 @@ const get_default_runtime = () => {
 // https://vercel.com/docs/functions/edge-functions/edge-runtime#compatible-node.js-modules
 const compatible_node_modules = ['async_hooks', 'events', 'buffer', 'assert', 'util'];
 
+const dir = '.vercel/output';
+
 /** @type {import('./index.js').default} **/
 const plugin = function (defaults = {}) {
 	if ('edge' in defaults) {
@@ -68,7 +70,6 @@ const plugin = function (defaults = {}) {
 				);
 			}
 
-			const dir = '.vercel/output';
 			const tmp = builder.getBuildDirectory('vercel-tmp');
 
 			builder.rimraf(dir);
@@ -632,41 +633,66 @@ function static_vercel_config(builder, config, dir) {
 		}
 	];
 
+	// TODO: doesn't work in safari
 	// https://vercel.com/docs/deployments/skew-protection
 	if (process.env.VERCEL_SKEW_PROTECTION_ENABLED) {
-		routes.push({
-			src: '/.*',
-			has: [
-				{
-					type: 'header',
-					key: 'Sec-Fetch-Dest',
-					value: 'document'
+		fs.writeFileSync(
+			`${dir}/service-worker.js`,
+			`
+const CACHE = "__SVELTEKIT_VERCEL_SKEW_PROTECTION__";
+
+const CACHE_KEY = "/_app/vercel-skew-protection";
+
+self.addEventListener("install", (event) => {
+  self.skipWaiting();
+});
+
+self.addEventListener("activate", (event) => {
+	event.waitUntil(clients.claim());
+});
+
+self.addEventListener("fetch", (event) => {
+  event.respondWith(
+    (async () => {
+			const cache = await caches.match(CACHE_KEY);
+
+			let request = event.request;
+
+			if (cache) {
+				const client_map = await cache.json();
+				const client_id = event.resultingClientId || event.clientId;
+				if (client_id in client_map) {
+					request = new Request(event.request, { headers: { ...event.request.headers, "x-deployment-id": client_map[client_id] } });
 				}
-			],
-			headers: {
-				'Set-Cookie': `__vdpl=${process.env.VERCEL_DEPLOYMENT_ID}; Path=${builder.config.kit.paths.base}/; SameSite=Strict; Secure; HttpOnly`
-			},
-			continue: true
-		});
+			}
+
+			return fetch(request);
+		})()
+  );
+});
+
+self.addEventListener("message", (event) => {
+	if (event.data?.__SVELTEKIT_VERCEL_SKEW_PROTECTION__) {
+		const client_ids = await clients.matchAll({ type: "all", includeUncontrolled: true });
+		const client_map = Object.fromEntries(client_ids.map((client) => [client.id, event.data.__SVELTEKIT_VERCEL_SKEW_PROTECTION__]));
 
-		// this is a dreadful hack that is necessary until the Vercel Build Output API
-		// allows you to set multiple cookies for a single route. essentially, since we
-		// know that the entry file will be requested immediately, we can set the second
-		// cookie in _that_ response rather than the document response
-		const base = `${dir}/${builder.config.kit.appDir}/immutable/entry`;
-		const entry = fs.readdirSync(base).find((file) => file.startsWith('start.'));
+		const previous = await caches.match(CACHE_KEY);
 
-		if (!entry) {
-			throw new Error('Could not find entry point');
+		if (previous) {
+			const previous_client_map = await previous.json();
+			for (const key in client_map) {
+				if (key in previous_client_map) {
+					client_map[key] = previous_client_map[key];
+				}
+			}
 		}
 
-		routes.splice(-2, 0, {
-			src: `/${builder.getAppPath()}/immutable/entry/${entry}`,
-			headers: {
-				'Set-Cookie': `__vdpl=; Path=/${builder.getAppPath()}/version.json; SameSite=Strict; Secure; HttpOnly`
-			},
-			continue: true
-		});
+		const cache = await caches.open(CACHE);
+		await cache.put(CACHE_KEY, Response.json(client_map));
+	}
+});
+		`.trim()
+		);
 	}
 
 	routes.push({
