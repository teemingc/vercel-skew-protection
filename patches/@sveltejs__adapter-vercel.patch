diff --git a/index.js b/index.js
index d4ec606663b0e2bdbd0b1a3f5a3e4bdf38323020..8af3b830ea73ff01c2c440cd2c4f8beef6f2bd75 100644
--- a/index.js
+++ b/index.js
@@ -51,6 +51,8 @@ const get_default_runtime = () => {
 // https://vercel.com/docs/functions/edge-functions/edge-runtime#compatible-node.js-modules
 const compatible_node_modules = ['async_hooks', 'events', 'buffer', 'assert', 'util'];
 
+const dir = '.vercel/output';
+
 /** @type {import('./index.js').default} **/
 const plugin = function (defaults = {}) {
 	if ('edge' in defaults) {
@@ -68,7 +70,6 @@ const plugin = function (defaults = {}) {
 				);
 			}
 
-			const dir = '.vercel/output';
 			const tmp = builder.getBuildDirectory('vercel-tmp');
 
 			builder.rimraf(dir);
@@ -632,41 +633,60 @@ function static_vercel_config(builder, config, dir) {
 		}
 	];
 
+	// TODO: avoid proxying request if page is on first load
 	// https://vercel.com/docs/deployments/skew-protection
 	if (process.env.VERCEL_SKEW_PROTECTION_ENABLED) {
-		routes.push({
-			src: '/.*',
-			has: [
-				{
-					type: 'header',
-					key: 'Sec-Fetch-Dest',
-					value: 'document'
+		fs.writeFileSync(
+			`${dir}/service-worker.js`,
+			`
+const CACHE = "__SVELTEKIT_VERCEL_SKEW_PROTECTION__";
+
+const CACHE_KEY = "/_app/vercel-skew-protection";
+
+const VERCEL_DEPLOYMENT_ID = "${process.env.VERCEL_DEPLOYMENT_ID}";
+
+self.addEventListener("install", (event) => {
+  self.skipWaiting();
+});
+
+self.addEventListener("activate", (event) => {
+	event.waitUntil(
+    (async () => {
+			await clients.claim();
+      const cache = await caches.open(CACHE);
+			const previous = await cache.match(CACHE_KEY);
+			const client_ids = await clients.matchAll({ type: "all", includeUncontrolled: true });
+			let client_map = Object.fromEntries(client_ids.map((client) => [client.id, VERCEL_DEPLOYMENT_ID]));
+			let response;
+			if (previous) {
+				const data = await previous.json();
+				client_map = {
+					...client_map,
+					...data
 				}
-			],
-			headers: {
-				'Set-Cookie': `__vdpl=${process.env.VERCEL_DEPLOYMENT_ID}; Path=${builder.config.kit.paths.base}/; SameSite=Strict; Secure; HttpOnly`
-			},
-			continue: true
-		});
-
-		// this is a dreadful hack that is necessary until the Vercel Build Output API
-		// allows you to set multiple cookies for a single route. essentially, since we
-		// know that the entry file will be requested immediately, we can set the second
-		// cookie in _that_ response rather than the document response
-		const base = `${dir}/${builder.config.kit.appDir}/immutable/entry`;
-		const entry = fs.readdirSync(base).find((file) => file.startsWith('start.'));
-
-		if (!entry) {
-			throw new Error('Could not find entry point');
-		}
-
-		routes.splice(-2, 0, {
-			src: `/${builder.getAppPath()}/immutable/entry/${entry}`,
-			headers: {
-				'Set-Cookie': `__vdpl=; Path=/${builder.getAppPath()}/version.json; SameSite=Strict; Secure; HttpOnly`
-			},
-			continue: true
-		});
+			} else {
+				response = Response.json(client_map);
+			}
+			await cache.put(CACHE_KEY, response);
+    })()
+  );
+});
+
+self.addEventListener("fetch", (event) => {
+  event.respondWith(
+    (async () => {
+			const cache = await caches.match(CACHE_KEY);
+			const deployment_id = (cache ? (await cache.json())[event.clientId] : undefined) ?? VERCEL_DEPLOYMENT_ID;
+			return fetch(
+				new Request(event.request, {
+					headers: { "x-deployment-id": deployment_id },
+				})
+			)
+		})()
+  );
+});
+		`.trim()
+		);
 	}
 
 	routes.push({
